#!/bin/python

import qrcode

def generate_qr(data):
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=1,
        border=4,
    )

    qr.add_data(data)
    qr.make(fit=True)

    matrix = [[cell for cell in line[3: -3]] for line in qr.get_matrix()[3: -3]]
    return matrix

def qr_to_terminal(qr_matrix):
    for line in qr_matrix:
        for cell in line:
            if cell: symbol = "\033[40m"
            else:    symbol = "\033[107m"
            print(symbol+"  \033[0m", end="")
        print()

def get_symbol(up, down):
    number = up<<1 | down
    match number:
        case 0: return "\033[40;97m"+chr(9608)+"\033[0m"
        case 1: return "\033[40;97m"+chr(9600)+"\033[0m"
        case 2: return "\033[40;97m"+chr(9604)+"\033[0m"
        case 3: return "\033[40;97m \033[0m"

def qr_to_terminal_small(qr_matrix):
    size = len(qr_matrix)
    for y in range(0, size, 2):
        for x in range(size):
            up = qr_matrix[x][y]
            if y+1 < size: down = qr_matrix[x][y+1]
            else:          down = True
            symbol = get_symbol(up, down)
            print(symbol, end="")
        print()

if __name__ == "__main__":
    from sys import argv
    if len(argv) != 2:
        print("Provide a text as argument to generate a qrcode.")
        exit(1)
    qr = generate_qr(argv[1])
    qr_to_terminal_small(qr)