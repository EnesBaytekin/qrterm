#!/usr/bin/env python3

import qrcode

def generate_qr(data):
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=1,
        border=4,
    )

    qr.add_data(data)
    qr.make(fit=True)

    matrix = [[cell for cell in line[3: -3]] for line in qr.get_matrix()[3: -3]]
    return matrix

def qr_to_terminal(qr_matrix):
    for line in qr_matrix:
        for cell in line:
            if cell: symbol = "\033[40m"
            else:    symbol = "\033[107m"
            print(symbol+"  \033[0m", end="")
        print()

def get_symbol(up, down):
    number = up<<1 | down
    match number:
        case 0: return "\033[40;97m"+chr(9608)+"\033[0m"
        case 1: return "\033[40;97m"+chr(9600)+"\033[0m"
        case 2: return "\033[40;97m"+chr(9604)+"\033[0m"
        case 3: return "\033[40;97m \033[0m"

def qr_to_terminal_small(qr_matrix):
    size = len(qr_matrix)
    for r in range(0, size, 2):
        for c in range(size):
            up = qr_matrix[r][c]
            if r+1 < size: down = qr_matrix[r+1][c]
            else:          down = True
            symbol = get_symbol(up, down)
            print(symbol, end="")
        print()

if __name__ == "__main__":
    from sys import argv

    def help():
        print("""\
Usage:
        qrterm [options] <text>

Options:
    -l, --large     Print qrcode larger.""")
        exit(1)

    if len(argv) == 1:
        help()
    
    argv.pop(0) # pop main file name
    
    is_large = False
    while "-l" in argv:
        argv.remove("-l")
        is_large = True
    while "--large" in argv:
        argv.remove("--large")
        is_large = True

    if len(argv) != 1:
        help()

    qr = generate_qr(argv[0])

    if is_large:
        qr_to_terminal(qr)
    else:
        qr_to_terminal_small(qr)
